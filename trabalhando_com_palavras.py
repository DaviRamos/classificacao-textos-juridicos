# -*- coding: utf-8 -*-
"""trabalhando_com_palavras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EZHVFH-umjwwtgTYP7VuWcnoO470ohJA

efetua os imports das dependencias
"""

import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split 
from sklearn.preprocessing import Normalizer
from sklearn.svm import SVC
from sklearn.pipeline import Pipeline

"""importa os dados do arquivo excel referente ao civil e adiciona a coluna CLASSE com o valor 0, representando o tipo de dado civil"""

uri_data_civel = 'https://github.com/julianopacheco/classificacao-textos-juridicos/blob/master/arquivos/xls/civel.xlsx?raw=true'
dados_civil = pd.read_excel(uri_data_civel)
dados_civil["CLASSE"] = 0

"""importa os dados do arquivo excel referente ao crime e adiciona a coluna CLASSE com o valor 1, representando o tipo de dado crime"""

uri_data_crime = 'https://github.com/julianopacheco/classificacao-textos-juridicos/blob/master/arquivos/xls/crime.xlsx?raw=true'
dados_crime = pd.read_excel(uri_data_crime)
dados_crime["CLASSE"] = 1

"""concatena as duas fontes de dados e gera uma nova contendo as duas"""

dados_civil_e_crime = pd.concat([dados_civil, dados_crime], axis=0)

"""como agora a fonte de dados contem as duas listas e necess치rio embaralhar elas para que o civil e crime nao venha na ordem que foram concatenados

isso e feito com o shuffle
"""

dados_civil_e_crime = shuffle(dados_civil_e_crime)
dados_civil_e_crime.head()

"""verifica a proporcionalidade de cada um dos tipos (civil = 0, crime = 1)"""

dados_civil_e_crime.CLASSE.value_counts()

"""extrai as ementas dos dados"""

ementas = dados_civil_e_crime["EMENTA"]

"""efetua o join das frases e junta todas as palavras de todas as frases n variavel all_words, escreve o total e monta a nuvem de palavras que ser치 desenhada no pr칩ximo bloco de c칩digo"""

def gera_nuvem_palavras(text):
  all_words = ' '.join(text)
  word_cloud = WordCloud(width=1200, height=800).generate(all_words)
  print(f'total de palavras {len(all_words)}')
  return word_cloud

"""desenha a nuvem de palavras dando maior destaque para as palavras com maior frequencia"""

def desenha_palavras(word_cloud):
  plt.figure(figsize=(10,10))
  plt.imshow(word_cloud, interpolation='bilinear')
  plt.axis('off')
  plt.show()

nuvem_palavras_civil = gera_nuvem_palavras(dados_civil.EMENTA)
desenha_palavras(nuvem_palavras_civil)

nuvem_palavras_crime = gera_nuvem_palavras(dados_crime.EMENTA)
desenha_palavras(nuvem_palavras_crime)

nuvem_palavras_civil_crime = gera_nuvem_palavras(dados_civil_e_crime.EMENTA)
desenha_palavras(nuvem_palavras_civil_crime)